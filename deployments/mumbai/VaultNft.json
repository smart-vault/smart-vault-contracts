{
  "address": "0xf42d5A9b745179Cb9ED65AD146bBfa592648681d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableAllowList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EnabledAllowList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "UserAllowList",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allowListEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "authorizedBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "authorizedTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bulkMintVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableAllowList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAllowList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isAllowlisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isOwnerOrInAllowlisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBatchMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        }
      ],
      "name": "preAuthorizeRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemAuthorizer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "safeMintUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "setAllowlistUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_destination",
          "type": "address"
        }
      ],
      "name": "setDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxBatchMint",
          "type": "uint256"
        }
      ],
      "name": "setMaxBatchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        }
      ],
      "name": "setMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_singleNftMeta",
          "type": "bool"
        }
      ],
      "name": "setSingleNftMeta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleNftMeta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbec6b5894f09e8e6276c63262746aac45f3fe8f736a64859fb687cb47856a35a",
  "receipt": {
    "to": null,
    "from": "0xDF09Ea7F5a274eC75b588b008B4FC5E5e970bEAC",
    "contractAddress": "0xf42d5A9b745179Cb9ED65AD146bBfa592648681d",
    "transactionIndex": 0,
    "gasUsed": "5148444",
    "logsBloom": "0x00000040000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008000002000000004000000000000000000000000000000000000000000800001000000000000040100000000000000000000020000000000000000000800000000000000000080000000000000400000800000000000000000000000000000000000000000000080000000000000200000000000000000000000000000000000200000000000000040000000004000000000000000000001000000000000000000000000000000100040000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xcbd17b257a3f5a4dcf0ab5a4c143a3e09e3daf78462c00d050dac04b6e0100bc",
    "transactionHash": "0xbec6b5894f09e8e6276c63262746aac45f3fe8f736a64859fb687cb47856a35a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 40489868,
        "transactionHash": "0xbec6b5894f09e8e6276c63262746aac45f3fe8f736a64859fb687cb47856a35a",
        "address": "0xf42d5A9b745179Cb9ED65AD146bBfa592648681d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000df09ea7f5a274ec75b588b008b4fc5e5e970beac"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcbd17b257a3f5a4dcf0ab5a4c143a3e09e3daf78462c00d050dac04b6e0100bc"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 40489868,
        "transactionHash": "0xbec6b5894f09e8e6276c63262746aac45f3fe8f736a64859fb687cb47856a35a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000df09ea7f5a274ec75b588b008b4fc5e5e970beac",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000058b60a56c2e1880000000000000000000000000000000000000000000000000a1f24d856875bb900000000000000000000000000000000000000000000130ce107148f4ec60cfa00000000000000000000000000000000000000000000000009c66ecdffc47a3100000000000000000000000000000000000000000000130ce15fca99a588ee82",
        "logIndex": 1,
        "blockHash": "0xcbd17b257a3f5a4dcf0ab5a4c143a3e09e3daf78462c00d050dac04b6e0100bc"
      }
    ],
    "blockNumber": 40489868,
    "cumulativeGasUsed": "5148444",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b6914e7f67e4dda8525e7cce7514850f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableAllowList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledAllowList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"UserAllowList\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowListEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"authorizedBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"authorizedTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bulkMintVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwnerOrInAllowlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"name\":\"preAuthorizeRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAuthorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMintUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"setAllowlistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"setDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBatchMint\",\"type\":\"uint256\"}],\"name\":\"setMaxBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_singleNftMeta\",\"type\":\"bool\"}],\"name\":\"setSingleNftMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleNftMeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultNft.sol\":\"VaultNft\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x52da94e59d870f54ca0eb4f485c3d9602011f668ba34d72c88124a1496ebaab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/AllowlistOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract AllowlistOwnable is Ownable {\\n    mapping(address => bool) public allowlist;\\n    bool public allowListEnabled = true;\\n\\n    event EnabledAllowList();\\n    event DisableAllowList();\\n    event UserAllowList(address account, bool isAllowed);\\n\\n    function isAllowlisted(address addr) public view returns (bool) {\\n        return allowlist[addr];\\n    }\\n\\n    function isOwnerOrInAllowlisted(address addr) public view returns (bool) {\\n        if(owner() == _msgSender()){ return true;}\\n        return allowlist[addr];\\n    }\\n\\n    modifier onlyAllowList() {\\n        if (allowListEnabled) {\\n            if (!isAllowlisted(_msgSender())) {\\n                revert(\\\"AlllowlistOwner: caller is not in the AllowList\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrInAllowList() {\\n        if (owner() != _msgSender()){\\n            if (allowListEnabled) {\\n                if (!isAllowlisted(_msgSender())) {\\n                    revert(\\\"AlllowlistOwner: caller is not the Owner or in the AllowList\\\");\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    function _addAllowlistAddresses(address[] memory _address) internal virtual {\\n        require(_address.length > 0, \\\"AlllowlistOwner: Must provide at least one address\\\");\\n        for(uint256 i=0; i<_address.length; i++){\\n            _setAllowlistUser(_address[i], true);\\n        }\\n    }\\n\\n    function _setAllowlistUser(address addr, bool _isAllowlisted) internal virtual {\\n        require(addr != address(0x0), \\\"AlllowlistOwner: Need a valid address\\\");\\n        allowlist[addr] = _isAllowlisted;\\n        emit UserAllowList(addr, _isAllowlisted);\\n    }\\n\\n    function _enableAllowList() internal virtual {\\n        allowListEnabled = true;\\n        emit EnabledAllowList();\\n    }\\n\\n    function _disableAllowList() internal virtual {\\n        allowListEnabled = false;\\n        emit DisableAllowList();\\n    }\\n\\n}\",\"keccak256\":\"0xd3eb825b94bf4d1b624998448d54e20edeb9418535d16b83b1e8c018ab29900f\",\"license\":\"MIT\"},\"contracts/IVaultNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVaultNFT is IERC721 { \\n\\n    function authorizedTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    function authorizedBurn(uint256 tokenId) external;\\n\\n}\",\"keccak256\":\"0xda1fcbe720806da66303cf146049d78e189c74229188780df18286f4e0047fa2\",\"license\":\"MIT\"},\"contracts/VaultNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport './AllowlistOwnable.sol';\\nimport \\\"./IVaultNft.sol\\\";\\n\\ncontract VaultNft is ERC721, ERC721Enumerable, ERC721URIStorage, Pausable, AllowlistOwnable, ERC721Burnable, IVaultNFT {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n    uint256 public mintFee = 0.01 ether;\\n    uint256 public maxSupply = 12345;\\n    uint256 public maxBatchMint = 5;\\n\\n    bool public singleNftMeta = true;\\n    address public redeemAuthorizer;\\n    address payable public destination;\\n    string public baseURI;\\n\\n    constructor() ERC721(\\\"VaultNft\\\", \\\"VLT\\\") {}\\n    \\n    function setMintFee(uint256 _mintFee) public onlyOwner {\\n        mintFee = _mintFee;\\n    }\\n\\n    function setMaxSupply(uint256 newMaxSupply) public onlyOwner {\\n        require(newMaxSupply >= 0, \\\"Need a valid new max supply\\\");\\n        maxSupply = newMaxSupply;\\n    }\\n\\n    function setMaxBatchMint(uint256 newMaxBatchMint) public onlyOwner {\\n        require(newMaxBatchMint >= 0, \\\"Need a valid new max mint limit\\\");\\n        maxBatchMint = newMaxBatchMint;\\n    }\\n\\n    function enableAllowList() public onlyOwner {\\n        _enableAllowList();\\n    }\\n\\n    function disableAllowList() public onlyOwner {\\n        _disableAllowList();\\n    }\\n\\n    function setAllowlistUser(address addr, bool isAllowed) public onlyOwner {\\n        _setAllowlistUser(addr, isAllowed);\\n    }\\n\\n    function setSingleNftMeta(bool _singleNftMeta) public onlyOwner {\\n        singleNftMeta = _singleNftMeta;\\n    }\\n\\n    function setBaseUri(string calldata baseUri) public onlyOwner {\\n        baseURI = baseUri;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setDestination(address payable _destination) public onlyOwner {\\n        destination = _destination;\\n    }\\n\\n    // admin to send to treasury\\n    function withdraw(uint amount) external onlyOwner {\\n        require(address(this).balance >= amount, \\\"balance value needs to be >= amount\\\");\\n        Address.sendValue(destination, amount);\\n    }\\n\\n    function authorizedTransferFrom(address from, address to, uint256 tokenId) public  {\\n        require( msg.sender == redeemAuthorizer, \\\"caller is not authorized to transfer\\\");\\n        super._safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeMintUri(address to, string memory uri) public onlyOwner {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    function safeMint(address to) public onlyOwner{\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function mintVault(address to) public payable virtual onlyAllowList {\\n        require(msg.value >= mintFee, \\\"mint fee not met\\\");\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function bulkMintVault(address to, uint256 amount) public payable virtual onlyAllowList {\\n        require(amount <= maxBatchMint, \\\"amount must be less than or equal to the maxBatchMinted\\\");\\n        require(msg.value >= (amount * mintFee), \\\"Payable must be at least the amount * mint fee\\\");\\n        for (uint256 i = 0; i < amount; i++) {\\n            mintVault(to);\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\\n        internal\\n        whenNotPaused\\n        override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function preAuthorizeRedeemer(address authorizer) public onlyOwner {\\n        redeemAuthorizer = authorizer;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function authorizedBurn(uint256 tokenId) public {\\n        require(msg.sender == redeemAuthorizer, \\\"caller is not authorized to burn\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n        string memory base = _baseURI();\\n\\n        // If singleNftMeta is set, all the metadata is the same return metadata.\\n        if (singleNftMeta) {\\n            if (bytes(base).length > 0) {\\n                return base;\\n            }\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd211120f3315969cc2210a1933e65c2a25faef0d30562eccb03415648d5f1a54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600d60006101000a81548160ff021916908315150217905550662386f26fc10000600f5561303960105560056011556001601260006101000a81548160ff0219169083151502179055503480156200005d57600080fd5b506040518060400160405280600881526020017f5661756c744e66740000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f564c5400000000000000000000000000000000000000000000000000000000008152508160009081620000db919062000479565b508060019081620000ed919062000479565b5050506000600b60006101000a81548160ff0219169083151502179055506200012b6200011f6200013160201b60201c565b6200013960201b60201c565b62000560565b600033905090565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028157607f821691505b60208210810362000297576200029662000239565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002c2565b6200030d8683620002c2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200035a620003546200034e8462000325565b6200032f565b62000325565b9050919050565b6000819050919050565b620003768362000339565b6200038e620003858262000361565b848454620002cf565b825550505050565b600090565b620003a562000396565b620003b28184846200036b565b505050565b5b81811015620003da57620003ce6000826200039b565b600181019050620003b8565b5050565b601f8211156200042957620003f3816200029d565b620003fe84620002b2565b810160208510156200040e578190505b620004266200041d85620002b2565b830182620003b7565b50505b505050565b600082821c905092915050565b60006200044e600019846008026200042e565b1980831691505092915050565b60006200046983836200043b565b9150826002028217905092915050565b6200048482620001ff565b67ffffffffffffffff811115620004a0576200049f6200020a565b5b620004ac825462000268565b620004b9828285620003de565b600060209050601f831160018114620004f15760008415620004dc578287015190505b620004e885826200045b565b86555062000558565b601f19841662000501866200029d565b60005b828110156200052b5784890151825560018201915060208501945060208101905062000504565b868310156200054b578489015162000547601f8916826200043b565b8355505b6001600288020188555050505b505050505050565b6158fb80620005706000396000f3fe6080604052600436106102e45760003560e01c80636494a5be11610190578063a22cb465116100dc578063d31f939511610095578063e985e9c51161006f578063e985e9c514610aeb578063eddd0d9c14610b28578063f2afd39914610b51578063f2fde38b14610b6d576102e4565b8063d31f939514610a80578063d5abeb0114610aa9578063dc2fbaee14610ad4576102e4565b8063a22cb4651461095e578063a7adf96414610987578063a7cd52cb146109b2578063b269681d146109ef578063b88d4fde14610a1a578063c87b56dd14610a43576102e4565b8063834029ba116101495780638da5cb5b116101235780638da5cb5b146108a257806395d89b41146108cd578063990c006d146108f8578063a0bcfc7f14610935576102e4565b8063834029ba1461084b5780638456cb59146108625780638b38d27c14610879576102e4565b80636494a5be146107515780636c0360eb1461077a5780636f8b44b0146107a55780637065ec39146107ce57806370a08231146107f7578063715018a614610834576102e4565b80632f745c591161024f578063450d624d11610208578063582d6422116101e2578063582d6422146106a25780635a9c787f146106be5780635c975abb146106e95780636352211e14610714576102e4565b8063450d624d14610613578063471676bb1461063c5780634f6ccce714610665576102e4565b80632f745c591461051b5780633045b241146105585780633f4ba83a1461058157806340d097c31461059857806342842e0e146105c157806342966c68146105ea576102e4565b80630a0a05e6116102a15780630a0a05e61461041f57806313966db51461044857806318160ddd1461047357806322bd5c1c1461049e57806323b872dd146104c95780632e1a7d4d146104f2576102e4565b806301ffc9a7146102e957806305a3b8091461032657806306fdde0314610363578063081812fc1461038e578063095ea7b3146103cb57806309a3a9c1146103f4575b600080fd5b3480156102f557600080fd5b50610310600480360381019061030b9190613a40565b610b96565b60405161031d9190613a88565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190613b01565b610ba8565b60405161035a9190613a88565b60405180910390f35b34801561036f57600080fd5b50610378610bfe565b6040516103859190613bbe565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b09190613c16565b610c90565b6040516103c29190613c52565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190613c6d565b610cd6565b005b34801561040057600080fd5b50610409610ded565b6040516104169190613cbc565b60405180910390f35b34801561042b57600080fd5b5061044660048036038101906104419190613d15565b610df3565b005b34801561045457600080fd5b5061045d610e3f565b60405161046a9190613cbc565b60405180910390f35b34801561047f57600080fd5b50610488610e45565b6040516104959190613cbc565b60405180910390f35b3480156104aa57600080fd5b506104b3610e52565b6040516104c09190613a88565b60405180910390f35b3480156104d557600080fd5b506104f060048036038101906104eb9190613d42565b610e65565b005b3480156104fe57600080fd5b5061051960048036038101906105149190613c16565b610ec5565b005b34801561052757600080fd5b50610542600480360381019061053d9190613c6d565b610f3f565b60405161054f9190613cbc565b60405180910390f35b34801561056457600080fd5b5061057f600480360381019061057a9190613dc1565b610fe4565b005b34801561058d57600080fd5b50610596610ffa565b005b3480156105a457600080fd5b506105bf60048036038101906105ba9190613b01565b61100c565b005b3480156105cd57600080fd5b506105e860048036038101906105e39190613d42565b61103a565b005b3480156105f657600080fd5b50610611600480360381019061060c9190613c16565b61105a565b005b34801561061f57600080fd5b5061063a60048036038101906106359190613e01565b6110b6565b005b34801561064857600080fd5b50610663600480360381019061065e9190613f63565b6110db565b005b34801561067157600080fd5b5061068c60048036038101906106879190613c16565b611114565b6040516106999190613cbc565b60405180910390f35b6106bc60048036038101906106b79190613c6d565b611185565b005b3480156106ca57600080fd5b506106d36112ab565b6040516106e09190613c52565b60405180910390f35b3480156106f557600080fd5b506106fe6112d1565b60405161070b9190613a88565b60405180910390f35b34801561072057600080fd5b5061073b60048036038101906107369190613c16565b6112e8565b6040516107489190613c52565b60405180910390f35b34801561075d57600080fd5b5061077860048036038101906107739190613b01565b61136e565b005b34801561078657600080fd5b5061078f6113ba565b60405161079c9190613bbe565b60405180910390f35b3480156107b157600080fd5b506107cc60048036038101906107c79190613c16565b611448565b005b3480156107da57600080fd5b506107f560048036038101906107f09190613c16565b61149e565b005b34801561080357600080fd5b5061081e60048036038101906108199190613b01565b61153a565b60405161082b9190613cbc565b60405180910390f35b34801561084057600080fd5b506108496115f1565b005b34801561085757600080fd5b50610860611605565b005b34801561086e57600080fd5b50610877611617565b005b34801561088557600080fd5b506108a0600480360381019061089b9190613d42565b611629565b005b3480156108ae57600080fd5b506108b76116d9565b6040516108c49190613c52565b60405180910390f35b3480156108d957600080fd5b506108e2611703565b6040516108ef9190613bbe565b60405180910390f35b34801561090457600080fd5b5061091f600480360381019061091a9190613b01565b611795565b60405161092c9190613a88565b60405180910390f35b34801561094157600080fd5b5061095c6004803603810190610957919061401f565b611836565b005b34801561096a57600080fd5b5061098560048036038101906109809190613dc1565b611854565b005b34801561099357600080fd5b5061099c61186a565b6040516109a99190613a88565b60405180910390f35b3480156109be57600080fd5b506109d960048036038101906109d49190613b01565b61187d565b6040516109e69190613a88565b60405180910390f35b3480156109fb57600080fd5b50610a0461189d565b604051610a11919061407b565b60405180910390f35b348015610a2657600080fd5b50610a416004803603810190610a3c9190614137565b6118c3565b005b348015610a4f57600080fd5b50610a6a6004803603810190610a659190613c16565b611925565b604051610a779190613bbe565b60405180910390f35b348015610a8c57600080fd5b50610aa76004803603810190610aa29190613c16565b611977565b005b348015610ab557600080fd5b50610abe6119cd565b604051610acb9190613cbc565b60405180910390f35b348015610ae057600080fd5b50610ae96119d3565b005b348015610af757600080fd5b50610b126004803603810190610b0d91906141ba565b6119e5565b604051610b1f9190613a88565b60405180910390f35b348015610b3457600080fd5b50610b4f6004803603810190610b4a9190613c16565b611a79565b005b610b6b6004803603810190610b669190613b01565b611a8b565b005b348015610b7957600080fd5b50610b946004803603810190610b8f9190613b01565b611b5b565b005b6000610ba182611bde565b9050919050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606060008054610c0d90614229565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3990614229565b8015610c865780601f10610c5b57610100808354040283529160200191610c86565b820191906000526020600020905b815481529060010190602001808311610c6957829003601f168201915b5050505050905090565b6000610c9b82611c3f565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ce1826112e8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d48906142cc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610d70611c8a565b73ffffffffffffffffffffffffffffffffffffffff161480610d9f5750610d9e81610d99611c8a565b6119e5565b5b610dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd59061435e565b60405180910390fd5b610de88383611c92565b505050565b60115481565b610dfb611d4b565b80601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600f5481565b6000600880549050905090565b600d60009054906101000a900460ff1681565b610e76610e70611c8a565b82611dc9565b610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac906143f0565b60405180910390fd5b610ec0838383611e5e565b505050565b610ecd611d4b565b80471015610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790614482565b60405180910390fd5b610f3c601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612157565b50565b6000610f4a8361153a565b8210610f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8290614514565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610fec611d4b565b610ff6828261224b565b5050565b611002611d4b565b61100a61234e565b565b611014611d4b565b6000611020600e6123b1565b905061102c600e6123bf565b61103682826123d5565b5050565b611055838383604051806020016040528060008152506118c3565b505050565b61106b611065611c8a565b82611dc9565b6110aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a1906143f0565b60405180910390fd5b6110b3816123f3565b50565b6110be611d4b565b80601260006101000a81548160ff02191690831515021790555050565b6110e3611d4b565b60006110ef600e6123b1565b90506110fb600e6123bf565b61110583826123d5565b61110f81836123ff565b505050565b600061111e610e45565b821061115f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611156906145a6565b60405180910390fd5b60088281548110611173576111726145c6565b5b90600052602060002001549050919050565b600d60009054906101000a900460ff16156111ea576111aa6111a5611c8a565b610ba8565b6111e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e090614667565b60405180910390fd5b5b60115481111561122f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611226906146f9565b60405180910390fd5b600f548161123d9190614748565b34101561127f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611276906147fc565b60405180910390fd5b60005b818110156112a65761129383611a8b565b808061129e9061481c565b915050611282565b505050565b601260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b60009054906101000a900460ff16905090565b6000806112f4836124a3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135c906148b0565b60405180910390fd5b80915050919050565b611376611d4b565b80601260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601480546113c790614229565b80601f01602080910402602001604051908101604052809291908181526020018280546113f390614229565b80156114405780601f1061141557610100808354040283529160200191611440565b820191906000526020600020905b81548152906001019060200180831161142357829003601f168201915b505050505081565b611450611d4b565b6000811015611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148b9061491c565b60405180910390fd5b8060108190555050565b601260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461152e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152590614988565b60405180910390fd5b611537816123f3565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a190614a1a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6115f9611d4b565b61160360006124e0565b565b61160d611d4b565b6116156125a6565b565b61161f611d4b565b6116276125ef565b565b601260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b090614aac565b60405180910390fd5b6116d483838360405180602001604052806000815250612652565b505050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461171290614229565b80601f016020809104026020016040519081016040528092919081815260200182805461173e90614229565b801561178b5780601f106117605761010080835404028352916020019161178b565b820191906000526020600020905b81548152906001019060200180831161176e57829003601f168201915b5050505050905090565b600061179f611c8a565b73ffffffffffffffffffffffffffffffffffffffff166117bd6116d9565b73ffffffffffffffffffffffffffffffffffffffff16036117e15760019050611831565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b61183e611d4b565b81816014918261184f929190614c83565b505050565b61186661185f611c8a565b83836126ae565b5050565b601260009054906101000a900460ff1681565b600c6020528060005260406000206000915054906101000a900460ff1681565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118d46118ce611c8a565b83611dc9565b611913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190a906143f0565b60405180910390fd5b61191f84848484612652565b50505050565b606061193082611c3f565b600061193a61281a565b9050601260009054906101000a900460ff1615611965576000815111156119645780915050611972565b5b61196e836128ac565b9150505b919050565b61197f611d4b565b60008110156119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ba90614d9f565b60405180910390fd5b8060118190555050565b60105481565b6119db611d4b565b6119e36129be565b565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a81611d4b565b80600f8190555050565b600d60009054906101000a900460ff1615611af057611ab0611aab611c8a565b610ba8565b611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae690614667565b60405180910390fd5b5b600f54341015611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90614e0b565b60405180910390fd5b6000611b41600e6123b1565b9050611b4d600e6123bf565b611b5782826123d5565b5050565b611b63611d4b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc990614e9d565b60405180910390fd5b611bdb816124e0565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c385750611c3782612a07565b5b9050919050565b611c4881612a81565b611c87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7e906148b0565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d05836112e8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611d53611c8a565b73ffffffffffffffffffffffffffffffffffffffff16611d716116d9565b73ffffffffffffffffffffffffffffffffffffffff1614611dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbe90614f09565b60405180910390fd5b565b600080611dd5836112e8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e175750611e1681856119e5565b5b80611e5557508373ffffffffffffffffffffffffffffffffffffffff16611e3d84610c90565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e7e826112e8565b73ffffffffffffffffffffffffffffffffffffffff1614611ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecb90614f9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a9061502d565b60405180910390fd5b611f508383836001612ac2565b8273ffffffffffffffffffffffffffffffffffffffff16611f70826112e8565b73ffffffffffffffffffffffffffffffffffffffff1614611fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbd90614f9b565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46121528383836001612adc565b505050565b8047101561219a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219190615099565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516121c0906150ea565b60006040518083038185875af1925050503d80600081146121fd576040519150601f19603f3d011682016040523d82523d6000602084013e612202565b606091505b5050905080612246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223d90615171565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036122ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b190615203565b60405180910390fd5b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f01883a2ded2d11a676263b3edca3878eec2c68618ae55db0314bebd4b9561b238282604051612342929190615223565b60405180910390a15050565b612356612ae2565b6000600b60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61239a611c8a565b6040516123a79190613c52565b60405180910390a1565b600081600001549050919050565b6001816000016000828254019250508190555050565b6123ef828260405180602001604052806000815250612b2b565b5050565b6123fc81612b86565b50565b61240882612a81565b612447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243e906152be565b60405180910390fd5b80600a6000848152602001908152602001600020908161246791906152de565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516124979190613cbc565b60405180910390a15050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600d60006101000a81548160ff0219169083151502179055507f17deb57f2c665512f91ec43836987faa802c8cd173a69f704a39155e48a40a2560405160405180910390a1565b6125f7612bd9565b6001600b60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861263b611c8a565b6040516126489190613c52565b60405180910390a1565b61265d848484611e5e565b61266984848484612c23565b6126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f90615422565b60405180910390fd5b50505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361271c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127139061548e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161280d9190613a88565b60405180910390a3505050565b60606014805461282990614229565b80601f016020809104026020016040519081016040528092919081815260200182805461285590614229565b80156128a25780601f10612877576101008083540402835291602001916128a2565b820191906000526020600020905b81548152906001019060200180831161288557829003601f168201915b5050505050905090565b60606128b782611c3f565b6000600a600084815260200190815260200160002080546128d790614229565b80601f016020809104026020016040519081016040528092919081815260200182805461290390614229565b80156129505780601f1061292557610100808354040283529160200191612950565b820191906000526020600020905b81548152906001019060200180831161293357829003601f168201915b50505050509050600061296161281a565b905060008151036129765781925050506129b9565b6000825111156129ab5780826040516020016129939291906154ea565b604051602081830303815290604052925050506129b9565b6129b484612daa565b925050505b919050565b6001600d60006101000a81548160ff0219169083151502179055507ff1917d42b61041c8a637919d5c23a9a559d72e57633d21cfe88c46b0fa01b6b960405160405180910390a1565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612a7a5750612a7982612e12565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612aa3836124a3565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612aca612bd9565b612ad684848484612ef4565b50505050565b50505050565b612aea6112d1565b612b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b209061555a565b60405180910390fd5b565b612b358383613052565b612b426000848484612c23565b612b81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7890615422565b60405180910390fd5b505050565b612b8f8161326f565b6000600a60008381526020019081526020016000208054612baf90614229565b905014612bd657600a60008281526020019081526020016000206000612bd59190613977565b5b50565b612be16112d1565b15612c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c18906155c6565b60405180910390fd5b565b6000612c448473ffffffffffffffffffffffffffffffffffffffff166133bd565b15612d9d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612c6d611c8a565b8786866040518563ffffffff1660e01b8152600401612c8f949392919061563b565b6020604051808303816000875af1925050508015612ccb57506040513d601f19601f82011682018060405250810190612cc8919061569c565b60015b612d4d573d8060008114612cfb576040519150601f19603f3d011682016040523d82523d6000602084013e612d00565b606091505b506000815103612d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3c90615422565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612da2565b600190505b949350505050565b6060612db582611c3f565b6000612dbf61281a565b90506000815111612ddf5760405180602001604052806000815250612e0a565b80612de9846133e0565b604051602001612dfa9291906154ea565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612edd57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612eed5750612eec826134ae565b5b9050919050565b612f0084848484613518565b6001811115612f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3b9061573b565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612f8b57612f868161351e565b612fca565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612fc957612fc88582613567565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361300c57613007816136d4565b61304b565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461304a5761304984826137a5565b5b5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036130c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130b8906157a7565b60405180910390fd5b6130ca81612a81565b1561310a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310190615813565b60405180910390fd5b613118600083836001612ac2565b61312181612a81565b15613161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161315890615813565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461326b600083836001612adc565b5050565b600061327a826112e8565b905061328a816000846001612ac2565b613293826112e8565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46133b9816000846001612adc565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600060016133ef84613824565b01905060008167ffffffffffffffff81111561340e5761340d613e38565b5b6040519080825280601f01601f1916602001820160405280156134405781602001600182028036833780820191505090505b509050600082602001820190505b6001156134a3578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161349757613496615833565b5b0494506000850361344e575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016135748461153a565b61357e9190615862565b9050600060076000848152602001908152602001600020549050818114613663576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506136e89190615862565b9050600060096000848152602001908152602001600020549050600060088381548110613718576137176145c6565b5b90600052602060002001549050806008838154811061373a576137396145c6565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061378957613788615896565b5b6001900381819060005260206000200160009055905550505050565b60006137b08361153a565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613882577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161387857613877615833565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106138bf576d04ee2d6d415b85acef810000000083816138b5576138b4615833565b5b0492506020810190505b662386f26fc1000083106138ee57662386f26fc1000083816138e4576138e3615833565b5b0492506010810190505b6305f5e1008310613917576305f5e100838161390d5761390c615833565b5b0492506008810190505b612710831061393c57612710838161393257613931615833565b5b0492506004810190505b6064831061395f576064838161395557613954615833565b5b0492506002810190505b600a831061396e576001810190505b80915050919050565b50805461398390614229565b6000825580601f1061399557506139b4565b601f0160209004906000526020600020908101906139b391906139b7565b5b50565b5b808211156139d05760008160009055506001016139b8565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613a1d816139e8565b8114613a2857600080fd5b50565b600081359050613a3a81613a14565b92915050565b600060208284031215613a5657613a556139de565b5b6000613a6484828501613a2b565b91505092915050565b60008115159050919050565b613a8281613a6d565b82525050565b6000602082019050613a9d6000830184613a79565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ace82613aa3565b9050919050565b613ade81613ac3565b8114613ae957600080fd5b50565b600081359050613afb81613ad5565b92915050565b600060208284031215613b1757613b166139de565b5b6000613b2584828501613aec565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b68578082015181840152602081019050613b4d565b60008484015250505050565b6000601f19601f8301169050919050565b6000613b9082613b2e565b613b9a8185613b39565b9350613baa818560208601613b4a565b613bb381613b74565b840191505092915050565b60006020820190508181036000830152613bd88184613b85565b905092915050565b6000819050919050565b613bf381613be0565b8114613bfe57600080fd5b50565b600081359050613c1081613bea565b92915050565b600060208284031215613c2c57613c2b6139de565b5b6000613c3a84828501613c01565b91505092915050565b613c4c81613ac3565b82525050565b6000602082019050613c676000830184613c43565b92915050565b60008060408385031215613c8457613c836139de565b5b6000613c9285828601613aec565b9250506020613ca385828601613c01565b9150509250929050565b613cb681613be0565b82525050565b6000602082019050613cd16000830184613cad565b92915050565b6000613ce282613aa3565b9050919050565b613cf281613cd7565b8114613cfd57600080fd5b50565b600081359050613d0f81613ce9565b92915050565b600060208284031215613d2b57613d2a6139de565b5b6000613d3984828501613d00565b91505092915050565b600080600060608486031215613d5b57613d5a6139de565b5b6000613d6986828701613aec565b9350506020613d7a86828701613aec565b9250506040613d8b86828701613c01565b9150509250925092565b613d9e81613a6d565b8114613da957600080fd5b50565b600081359050613dbb81613d95565b92915050565b60008060408385031215613dd857613dd76139de565b5b6000613de685828601613aec565b9250506020613df785828601613dac565b9150509250929050565b600060208284031215613e1757613e166139de565b5b6000613e2584828501613dac565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613e7082613b74565b810181811067ffffffffffffffff82111715613e8f57613e8e613e38565b5b80604052505050565b6000613ea26139d4565b9050613eae8282613e67565b919050565b600067ffffffffffffffff821115613ece57613ecd613e38565b5b613ed782613b74565b9050602081019050919050565b82818337600083830152505050565b6000613f06613f0184613eb3565b613e98565b905082815260208101848484011115613f2257613f21613e33565b5b613f2d848285613ee4565b509392505050565b600082601f830112613f4a57613f49613e2e565b5b8135613f5a848260208601613ef3565b91505092915050565b60008060408385031215613f7a57613f796139de565b5b6000613f8885828601613aec565b925050602083013567ffffffffffffffff811115613fa957613fa86139e3565b5b613fb585828601613f35565b9150509250929050565b600080fd5b600080fd5b60008083601f840112613fdf57613fde613e2e565b5b8235905067ffffffffffffffff811115613ffc57613ffb613fbf565b5b60208301915083600182028301111561401857614017613fc4565b5b9250929050565b60008060208385031215614036576140356139de565b5b600083013567ffffffffffffffff811115614054576140536139e3565b5b61406085828601613fc9565b92509250509250929050565b61407581613cd7565b82525050565b6000602082019050614090600083018461406c565b92915050565b600067ffffffffffffffff8211156140b1576140b0613e38565b5b6140ba82613b74565b9050602081019050919050565b60006140da6140d584614096565b613e98565b9050828152602081018484840111156140f6576140f5613e33565b5b614101848285613ee4565b509392505050565b600082601f83011261411e5761411d613e2e565b5b813561412e8482602086016140c7565b91505092915050565b60008060008060808587031215614151576141506139de565b5b600061415f87828801613aec565b945050602061417087828801613aec565b935050604061418187828801613c01565b925050606085013567ffffffffffffffff8111156141a2576141a16139e3565b5b6141ae87828801614109565b91505092959194509250565b600080604083850312156141d1576141d06139de565b5b60006141df85828601613aec565b92505060206141f085828601613aec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061424157607f821691505b602082108103614254576142536141fa565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006142b6602183613b39565b91506142c18261425a565b604082019050919050565b600060208201905081810360008301526142e5816142a9565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000614348603d83613b39565b9150614353826142ec565b604082019050919050565b600060208201905081810360008301526143778161433b565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006143da602d83613b39565b91506143e58261437e565b604082019050919050565b60006020820190508181036000830152614409816143cd565b9050919050565b7f62616c616e63652076616c7565206e6565647320746f206265203e3d20616d6f60008201527f756e740000000000000000000000000000000000000000000000000000000000602082015250565b600061446c602383613b39565b915061447782614410565b604082019050919050565b6000602082019050818103600083015261449b8161445f565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006144fe602b83613b39565b9150614509826144a2565b604082019050919050565b6000602082019050818103600083015261452d816144f1565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614590602c83613b39565b915061459b82614534565b604082019050919050565b600060208201905081810360008301526145bf81614583565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416c6c6c6f776c6973744f776e65723a2063616c6c6572206973206e6f74206960008201527f6e2074686520416c6c6f774c6973740000000000000000000000000000000000602082015250565b6000614651602f83613b39565b915061465c826145f5565b604082019050919050565b6000602082019050818103600083015261468081614644565b9050919050565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f20746865206d617842617463684d696e746564000000000000000000602082015250565b60006146e3603783613b39565b91506146ee82614687565b604082019050919050565b60006020820190508181036000830152614712816146d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061475382613be0565b915061475e83613be0565b925082820261476c81613be0565b9150828204841483151761478357614782614719565b5b5092915050565b7f50617961626c65206d757374206265206174206c656173742074686520616d6f60008201527f756e74202a206d696e7420666565000000000000000000000000000000000000602082015250565b60006147e6602e83613b39565b91506147f18261478a565b604082019050919050565b60006020820190508181036000830152614815816147d9565b9050919050565b600061482782613be0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361485957614858614719565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061489a601883613b39565b91506148a582614864565b602082019050919050565b600060208201905081810360008301526148c98161488d565b9050919050565b7f4e65656420612076616c6964206e6577206d617820737570706c790000000000600082015250565b6000614906601b83613b39565b9150614911826148d0565b602082019050919050565b60006020820190508181036000830152614935816148f9565b9050919050565b7f63616c6c6572206973206e6f7420617574686f72697a656420746f206275726e600082015250565b6000614972602083613b39565b915061497d8261493c565b602082019050919050565b600060208201905081810360008301526149a181614965565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614a04602983613b39565b9150614a0f826149a8565b604082019050919050565b60006020820190508181036000830152614a33816149f7565b9050919050565b7f63616c6c6572206973206e6f7420617574686f72697a656420746f207472616e60008201527f7366657200000000000000000000000000000000000000000000000000000000602082015250565b6000614a96602483613b39565b9150614aa182614a3a565b604082019050919050565b60006020820190508181036000830152614ac581614a89565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614b397fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614afc565b614b438683614afc565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614b80614b7b614b7684613be0565b614b5b565b613be0565b9050919050565b6000819050919050565b614b9a83614b65565b614bae614ba682614b87565b848454614b09565b825550505050565b600090565b614bc3614bb6565b614bce818484614b91565b505050565b5b81811015614bf257614be7600082614bbb565b600181019050614bd4565b5050565b601f821115614c3757614c0881614ad7565b614c1184614aec565b81016020851015614c20578190505b614c34614c2c85614aec565b830182614bd3565b50505b505050565b600082821c905092915050565b6000614c5a60001984600802614c3c565b1980831691505092915050565b6000614c738383614c49565b9150826002028217905092915050565b614c8d8383614acc565b67ffffffffffffffff811115614ca657614ca5613e38565b5b614cb08254614229565b614cbb828285614bf6565b6000601f831160018114614cea5760008415614cd8578287013590505b614ce28582614c67565b865550614d4a565b601f198416614cf886614ad7565b60005b82811015614d2057848901358255600182019150602085019450602081019050614cfb565b86831015614d3d5784890135614d39601f891682614c49565b8355505b6001600288020188555050505b50505050505050565b7f4e65656420612076616c6964206e6577206d6178206d696e74206c696d697400600082015250565b6000614d89601f83613b39565b9150614d9482614d53565b602082019050919050565b60006020820190508181036000830152614db881614d7c565b9050919050565b7f6d696e7420666565206e6f74206d657400000000000000000000000000000000600082015250565b6000614df5601083613b39565b9150614e0082614dbf565b602082019050919050565b60006020820190508181036000830152614e2481614de8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614e87602683613b39565b9150614e9282614e2b565b604082019050919050565b60006020820190508181036000830152614eb681614e7a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614ef3602083613b39565b9150614efe82614ebd565b602082019050919050565b60006020820190508181036000830152614f2281614ee6565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614f85602583613b39565b9150614f9082614f29565b604082019050919050565b60006020820190508181036000830152614fb481614f78565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000615017602483613b39565b915061502282614fbb565b604082019050919050565b600060208201905081810360008301526150468161500a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000615083601d83613b39565b915061508e8261504d565b602082019050919050565b600060208201905081810360008301526150b281615076565b9050919050565b600081905092915050565b50565b60006150d46000836150b9565b91506150df826150c4565b600082019050919050565b60006150f5826150c7565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061515b603a83613b39565b9150615166826150ff565b604082019050919050565b6000602082019050818103600083015261518a8161514e565b9050919050565b7f416c6c6c6f776c6973744f776e65723a204e65656420612076616c696420616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006151ed602583613b39565b91506151f882615191565b604082019050919050565b6000602082019050818103600083015261521c816151e0565b9050919050565b60006040820190506152386000830185613c43565b6152456020830184613a79565b9392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006152a8602e83613b39565b91506152b38261524c565b604082019050919050565b600060208201905081810360008301526152d78161529b565b9050919050565b6152e782613b2e565b67ffffffffffffffff811115615300576152ff613e38565b5b61530a8254614229565b615315828285614bf6565b600060209050601f8311600181146153485760008415615336578287015190505b6153408582614c67565b8655506153a8565b601f19841661535686614ad7565b60005b8281101561537e57848901518255600182019150602085019450602081019050615359565b8683101561539b5784890151615397601f891682614c49565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061540c603283613b39565b9150615417826153b0565b604082019050919050565b6000602082019050818103600083015261543b816153ff565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000615478601983613b39565b915061548382615442565b602082019050919050565b600060208201905081810360008301526154a78161546b565b9050919050565b600081905092915050565b60006154c482613b2e565b6154ce81856154ae565b93506154de818560208601613b4a565b80840191505092915050565b60006154f682856154b9565b915061550282846154b9565b91508190509392505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615544601483613b39565b915061554f8261550e565b602082019050919050565b6000602082019050818103600083015261557381615537565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006155b0601083613b39565b91506155bb8261557a565b602082019050919050565b600060208201905081810360008301526155df816155a3565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061560d826155e6565b61561781856155f1565b9350615627818560208601613b4a565b61563081613b74565b840191505092915050565b60006080820190506156506000830187613c43565b61565d6020830186613c43565b61566a6040830185613cad565b818103606083015261567c8184615602565b905095945050505050565b60008151905061569681613a14565b92915050565b6000602082840312156156b2576156b16139de565b5b60006156c084828501615687565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000615725603583613b39565b9150615730826156c9565b604082019050919050565b6000602082019050818103600083015261575481615718565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615791602083613b39565b915061579c8261575b565b602082019050919050565b600060208201905081810360008301526157c081615784565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006157fd601c83613b39565b9150615808826157c7565b602082019050919050565b6000602082019050818103600083015261582c816157f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061586d82613be0565b915061587883613be0565b92508282039050818111156158905761588f614719565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220ffff4965c376abc0503dccba4baee41af802ed302acfd1654e7378fb5d385b2f64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102e45760003560e01c80636494a5be11610190578063a22cb465116100dc578063d31f939511610095578063e985e9c51161006f578063e985e9c514610aeb578063eddd0d9c14610b28578063f2afd39914610b51578063f2fde38b14610b6d576102e4565b8063d31f939514610a80578063d5abeb0114610aa9578063dc2fbaee14610ad4576102e4565b8063a22cb4651461095e578063a7adf96414610987578063a7cd52cb146109b2578063b269681d146109ef578063b88d4fde14610a1a578063c87b56dd14610a43576102e4565b8063834029ba116101495780638da5cb5b116101235780638da5cb5b146108a257806395d89b41146108cd578063990c006d146108f8578063a0bcfc7f14610935576102e4565b8063834029ba1461084b5780638456cb59146108625780638b38d27c14610879576102e4565b80636494a5be146107515780636c0360eb1461077a5780636f8b44b0146107a55780637065ec39146107ce57806370a08231146107f7578063715018a614610834576102e4565b80632f745c591161024f578063450d624d11610208578063582d6422116101e2578063582d6422146106a25780635a9c787f146106be5780635c975abb146106e95780636352211e14610714576102e4565b8063450d624d14610613578063471676bb1461063c5780634f6ccce714610665576102e4565b80632f745c591461051b5780633045b241146105585780633f4ba83a1461058157806340d097c31461059857806342842e0e146105c157806342966c68146105ea576102e4565b80630a0a05e6116102a15780630a0a05e61461041f57806313966db51461044857806318160ddd1461047357806322bd5c1c1461049e57806323b872dd146104c95780632e1a7d4d146104f2576102e4565b806301ffc9a7146102e957806305a3b8091461032657806306fdde0314610363578063081812fc1461038e578063095ea7b3146103cb57806309a3a9c1146103f4575b600080fd5b3480156102f557600080fd5b50610310600480360381019061030b9190613a40565b610b96565b60405161031d9190613a88565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190613b01565b610ba8565b60405161035a9190613a88565b60405180910390f35b34801561036f57600080fd5b50610378610bfe565b6040516103859190613bbe565b60405180910390f35b34801561039a57600080fd5b506103b560048036038101906103b09190613c16565b610c90565b6040516103c29190613c52565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190613c6d565b610cd6565b005b34801561040057600080fd5b50610409610ded565b6040516104169190613cbc565b60405180910390f35b34801561042b57600080fd5b5061044660048036038101906104419190613d15565b610df3565b005b34801561045457600080fd5b5061045d610e3f565b60405161046a9190613cbc565b60405180910390f35b34801561047f57600080fd5b50610488610e45565b6040516104959190613cbc565b60405180910390f35b3480156104aa57600080fd5b506104b3610e52565b6040516104c09190613a88565b60405180910390f35b3480156104d557600080fd5b506104f060048036038101906104eb9190613d42565b610e65565b005b3480156104fe57600080fd5b5061051960048036038101906105149190613c16565b610ec5565b005b34801561052757600080fd5b50610542600480360381019061053d9190613c6d565b610f3f565b60405161054f9190613cbc565b60405180910390f35b34801561056457600080fd5b5061057f600480360381019061057a9190613dc1565b610fe4565b005b34801561058d57600080fd5b50610596610ffa565b005b3480156105a457600080fd5b506105bf60048036038101906105ba9190613b01565b61100c565b005b3480156105cd57600080fd5b506105e860048036038101906105e39190613d42565b61103a565b005b3480156105f657600080fd5b50610611600480360381019061060c9190613c16565b61105a565b005b34801561061f57600080fd5b5061063a60048036038101906106359190613e01565b6110b6565b005b34801561064857600080fd5b50610663600480360381019061065e9190613f63565b6110db565b005b34801561067157600080fd5b5061068c60048036038101906106879190613c16565b611114565b6040516106999190613cbc565b60405180910390f35b6106bc60048036038101906106b79190613c6d565b611185565b005b3480156106ca57600080fd5b506106d36112ab565b6040516106e09190613c52565b60405180910390f35b3480156106f557600080fd5b506106fe6112d1565b60405161070b9190613a88565b60405180910390f35b34801561072057600080fd5b5061073b60048036038101906107369190613c16565b6112e8565b6040516107489190613c52565b60405180910390f35b34801561075d57600080fd5b5061077860048036038101906107739190613b01565b61136e565b005b34801561078657600080fd5b5061078f6113ba565b60405161079c9190613bbe565b60405180910390f35b3480156107b157600080fd5b506107cc60048036038101906107c79190613c16565b611448565b005b3480156107da57600080fd5b506107f560048036038101906107f09190613c16565b61149e565b005b34801561080357600080fd5b5061081e60048036038101906108199190613b01565b61153a565b60405161082b9190613cbc565b60405180910390f35b34801561084057600080fd5b506108496115f1565b005b34801561085757600080fd5b50610860611605565b005b34801561086e57600080fd5b50610877611617565b005b34801561088557600080fd5b506108a0600480360381019061089b9190613d42565b611629565b005b3480156108ae57600080fd5b506108b76116d9565b6040516108c49190613c52565b60405180910390f35b3480156108d957600080fd5b506108e2611703565b6040516108ef9190613bbe565b60405180910390f35b34801561090457600080fd5b5061091f600480360381019061091a9190613b01565b611795565b60405161092c9190613a88565b60405180910390f35b34801561094157600080fd5b5061095c6004803603810190610957919061401f565b611836565b005b34801561096a57600080fd5b5061098560048036038101906109809190613dc1565b611854565b005b34801561099357600080fd5b5061099c61186a565b6040516109a99190613a88565b60405180910390f35b3480156109be57600080fd5b506109d960048036038101906109d49190613b01565b61187d565b6040516109e69190613a88565b60405180910390f35b3480156109fb57600080fd5b50610a0461189d565b604051610a11919061407b565b60405180910390f35b348015610a2657600080fd5b50610a416004803603810190610a3c9190614137565b6118c3565b005b348015610a4f57600080fd5b50610a6a6004803603810190610a659190613c16565b611925565b604051610a779190613bbe565b60405180910390f35b348015610a8c57600080fd5b50610aa76004803603810190610aa29190613c16565b611977565b005b348015610ab557600080fd5b50610abe6119cd565b604051610acb9190613cbc565b60405180910390f35b348015610ae057600080fd5b50610ae96119d3565b005b348015610af757600080fd5b50610b126004803603810190610b0d91906141ba565b6119e5565b604051610b1f9190613a88565b60405180910390f35b348015610b3457600080fd5b50610b4f6004803603810190610b4a9190613c16565b611a79565b005b610b6b6004803603810190610b669190613b01565b611a8b565b005b348015610b7957600080fd5b50610b946004803603810190610b8f9190613b01565b611b5b565b005b6000610ba182611bde565b9050919050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606060008054610c0d90614229565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3990614229565b8015610c865780601f10610c5b57610100808354040283529160200191610c86565b820191906000526020600020905b815481529060010190602001808311610c6957829003601f168201915b5050505050905090565b6000610c9b82611c3f565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ce1826112e8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d48906142cc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610d70611c8a565b73ffffffffffffffffffffffffffffffffffffffff161480610d9f5750610d9e81610d99611c8a565b6119e5565b5b610dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd59061435e565b60405180910390fd5b610de88383611c92565b505050565b60115481565b610dfb611d4b565b80601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600f5481565b6000600880549050905090565b600d60009054906101000a900460ff1681565b610e76610e70611c8a565b82611dc9565b610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac906143f0565b60405180910390fd5b610ec0838383611e5e565b505050565b610ecd611d4b565b80471015610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790614482565b60405180910390fd5b610f3c601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682612157565b50565b6000610f4a8361153a565b8210610f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8290614514565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610fec611d4b565b610ff6828261224b565b5050565b611002611d4b565b61100a61234e565b565b611014611d4b565b6000611020600e6123b1565b905061102c600e6123bf565b61103682826123d5565b5050565b611055838383604051806020016040528060008152506118c3565b505050565b61106b611065611c8a565b82611dc9565b6110aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a1906143f0565b60405180910390fd5b6110b3816123f3565b50565b6110be611d4b565b80601260006101000a81548160ff02191690831515021790555050565b6110e3611d4b565b60006110ef600e6123b1565b90506110fb600e6123bf565b61110583826123d5565b61110f81836123ff565b505050565b600061111e610e45565b821061115f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611156906145a6565b60405180910390fd5b60088281548110611173576111726145c6565b5b90600052602060002001549050919050565b600d60009054906101000a900460ff16156111ea576111aa6111a5611c8a565b610ba8565b6111e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e090614667565b60405180910390fd5b5b60115481111561122f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611226906146f9565b60405180910390fd5b600f548161123d9190614748565b34101561127f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611276906147fc565b60405180910390fd5b60005b818110156112a65761129383611a8b565b808061129e9061481c565b915050611282565b505050565b601260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b60009054906101000a900460ff16905090565b6000806112f4836124a3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135c906148b0565b60405180910390fd5b80915050919050565b611376611d4b565b80601260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601480546113c790614229565b80601f01602080910402602001604051908101604052809291908181526020018280546113f390614229565b80156114405780601f1061141557610100808354040283529160200191611440565b820191906000526020600020905b81548152906001019060200180831161142357829003601f168201915b505050505081565b611450611d4b565b6000811015611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148b9061491c565b60405180910390fd5b8060108190555050565b601260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461152e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152590614988565b60405180910390fd5b611537816123f3565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a190614a1a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6115f9611d4b565b61160360006124e0565b565b61160d611d4b565b6116156125a6565b565b61161f611d4b565b6116276125ef565b565b601260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b090614aac565b60405180910390fd5b6116d483838360405180602001604052806000815250612652565b505050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461171290614229565b80601f016020809104026020016040519081016040528092919081815260200182805461173e90614229565b801561178b5780601f106117605761010080835404028352916020019161178b565b820191906000526020600020905b81548152906001019060200180831161176e57829003601f168201915b5050505050905090565b600061179f611c8a565b73ffffffffffffffffffffffffffffffffffffffff166117bd6116d9565b73ffffffffffffffffffffffffffffffffffffffff16036117e15760019050611831565b600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b61183e611d4b565b81816014918261184f929190614c83565b505050565b61186661185f611c8a565b83836126ae565b5050565b601260009054906101000a900460ff1681565b600c6020528060005260406000206000915054906101000a900460ff1681565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118d46118ce611c8a565b83611dc9565b611913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190a906143f0565b60405180910390fd5b61191f84848484612652565b50505050565b606061193082611c3f565b600061193a61281a565b9050601260009054906101000a900460ff1615611965576000815111156119645780915050611972565b5b61196e836128ac565b9150505b919050565b61197f611d4b565b60008110156119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ba90614d9f565b60405180910390fd5b8060118190555050565b60105481565b6119db611d4b565b6119e36129be565b565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611a81611d4b565b80600f8190555050565b600d60009054906101000a900460ff1615611af057611ab0611aab611c8a565b610ba8565b611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae690614667565b60405180910390fd5b5b600f54341015611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90614e0b565b60405180910390fd5b6000611b41600e6123b1565b9050611b4d600e6123bf565b611b5782826123d5565b5050565b611b63611d4b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc990614e9d565b60405180910390fd5b611bdb816124e0565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c385750611c3782612a07565b5b9050919050565b611c4881612a81565b611c87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7e906148b0565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d05836112e8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611d53611c8a565b73ffffffffffffffffffffffffffffffffffffffff16611d716116d9565b73ffffffffffffffffffffffffffffffffffffffff1614611dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbe90614f09565b60405180910390fd5b565b600080611dd5836112e8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e175750611e1681856119e5565b5b80611e5557508373ffffffffffffffffffffffffffffffffffffffff16611e3d84610c90565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e7e826112e8565b73ffffffffffffffffffffffffffffffffffffffff1614611ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecb90614f9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a9061502d565b60405180910390fd5b611f508383836001612ac2565b8273ffffffffffffffffffffffffffffffffffffffff16611f70826112e8565b73ffffffffffffffffffffffffffffffffffffffff1614611fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbd90614f9b565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46121528383836001612adc565b505050565b8047101561219a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219190615099565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516121c0906150ea565b60006040518083038185875af1925050503d80600081146121fd576040519150601f19603f3d011682016040523d82523d6000602084013e612202565b606091505b5050905080612246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223d90615171565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036122ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b190615203565b60405180910390fd5b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f01883a2ded2d11a676263b3edca3878eec2c68618ae55db0314bebd4b9561b238282604051612342929190615223565b60405180910390a15050565b612356612ae2565b6000600b60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61239a611c8a565b6040516123a79190613c52565b60405180910390a1565b600081600001549050919050565b6001816000016000828254019250508190555050565b6123ef828260405180602001604052806000815250612b2b565b5050565b6123fc81612b86565b50565b61240882612a81565b612447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243e906152be565b60405180910390fd5b80600a6000848152602001908152602001600020908161246791906152de565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516124979190613cbc565b60405180910390a15050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600d60006101000a81548160ff0219169083151502179055507f17deb57f2c665512f91ec43836987faa802c8cd173a69f704a39155e48a40a2560405160405180910390a1565b6125f7612bd9565b6001600b60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861263b611c8a565b6040516126489190613c52565b60405180910390a1565b61265d848484611e5e565b61266984848484612c23565b6126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f90615422565b60405180910390fd5b50505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361271c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127139061548e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161280d9190613a88565b60405180910390a3505050565b60606014805461282990614229565b80601f016020809104026020016040519081016040528092919081815260200182805461285590614229565b80156128a25780601f10612877576101008083540402835291602001916128a2565b820191906000526020600020905b81548152906001019060200180831161288557829003601f168201915b5050505050905090565b60606128b782611c3f565b6000600a600084815260200190815260200160002080546128d790614229565b80601f016020809104026020016040519081016040528092919081815260200182805461290390614229565b80156129505780601f1061292557610100808354040283529160200191612950565b820191906000526020600020905b81548152906001019060200180831161293357829003601f168201915b50505050509050600061296161281a565b905060008151036129765781925050506129b9565b6000825111156129ab5780826040516020016129939291906154ea565b604051602081830303815290604052925050506129b9565b6129b484612daa565b925050505b919050565b6001600d60006101000a81548160ff0219169083151502179055507ff1917d42b61041c8a637919d5c23a9a559d72e57633d21cfe88c46b0fa01b6b960405160405180910390a1565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612a7a5750612a7982612e12565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612aa3836124a3565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612aca612bd9565b612ad684848484612ef4565b50505050565b50505050565b612aea6112d1565b612b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b209061555a565b60405180910390fd5b565b612b358383613052565b612b426000848484612c23565b612b81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7890615422565b60405180910390fd5b505050565b612b8f8161326f565b6000600a60008381526020019081526020016000208054612baf90614229565b905014612bd657600a60008281526020019081526020016000206000612bd59190613977565b5b50565b612be16112d1565b15612c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c18906155c6565b60405180910390fd5b565b6000612c448473ffffffffffffffffffffffffffffffffffffffff166133bd565b15612d9d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612c6d611c8a565b8786866040518563ffffffff1660e01b8152600401612c8f949392919061563b565b6020604051808303816000875af1925050508015612ccb57506040513d601f19601f82011682018060405250810190612cc8919061569c565b60015b612d4d573d8060008114612cfb576040519150601f19603f3d011682016040523d82523d6000602084013e612d00565b606091505b506000815103612d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3c90615422565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612da2565b600190505b949350505050565b6060612db582611c3f565b6000612dbf61281a565b90506000815111612ddf5760405180602001604052806000815250612e0a565b80612de9846133e0565b604051602001612dfa9291906154ea565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612edd57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612eed5750612eec826134ae565b5b9050919050565b612f0084848484613518565b6001811115612f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3b9061573b565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612f8b57612f868161351e565b612fca565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612fc957612fc88582613567565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361300c57613007816136d4565b61304b565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461304a5761304984826137a5565b5b5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036130c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130b8906157a7565b60405180910390fd5b6130ca81612a81565b1561310a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310190615813565b60405180910390fd5b613118600083836001612ac2565b61312181612a81565b15613161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161315890615813565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461326b600083836001612adc565b5050565b600061327a826112e8565b905061328a816000846001612ac2565b613293826112e8565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46133b9816000846001612adc565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600060016133ef84613824565b01905060008167ffffffffffffffff81111561340e5761340d613e38565b5b6040519080825280601f01601f1916602001820160405280156134405781602001600182028036833780820191505090505b509050600082602001820190505b6001156134a3578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161349757613496615833565b5b0494506000850361344e575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016135748461153a565b61357e9190615862565b9050600060076000848152602001908152602001600020549050818114613663576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506136e89190615862565b9050600060096000848152602001908152602001600020549050600060088381548110613718576137176145c6565b5b90600052602060002001549050806008838154811061373a576137396145c6565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061378957613788615896565b5b6001900381819060005260206000200160009055905550505050565b60006137b08361153a565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613882577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161387857613877615833565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106138bf576d04ee2d6d415b85acef810000000083816138b5576138b4615833565b5b0492506020810190505b662386f26fc1000083106138ee57662386f26fc1000083816138e4576138e3615833565b5b0492506010810190505b6305f5e1008310613917576305f5e100838161390d5761390c615833565b5b0492506008810190505b612710831061393c57612710838161393257613931615833565b5b0492506004810190505b6064831061395f576064838161395557613954615833565b5b0492506002810190505b600a831061396e576001810190505b80915050919050565b50805461398390614229565b6000825580601f1061399557506139b4565b601f0160209004906000526020600020908101906139b391906139b7565b5b50565b5b808211156139d05760008160009055506001016139b8565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613a1d816139e8565b8114613a2857600080fd5b50565b600081359050613a3a81613a14565b92915050565b600060208284031215613a5657613a556139de565b5b6000613a6484828501613a2b565b91505092915050565b60008115159050919050565b613a8281613a6d565b82525050565b6000602082019050613a9d6000830184613a79565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ace82613aa3565b9050919050565b613ade81613ac3565b8114613ae957600080fd5b50565b600081359050613afb81613ad5565b92915050565b600060208284031215613b1757613b166139de565b5b6000613b2584828501613aec565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b68578082015181840152602081019050613b4d565b60008484015250505050565b6000601f19601f8301169050919050565b6000613b9082613b2e565b613b9a8185613b39565b9350613baa818560208601613b4a565b613bb381613b74565b840191505092915050565b60006020820190508181036000830152613bd88184613b85565b905092915050565b6000819050919050565b613bf381613be0565b8114613bfe57600080fd5b50565b600081359050613c1081613bea565b92915050565b600060208284031215613c2c57613c2b6139de565b5b6000613c3a84828501613c01565b91505092915050565b613c4c81613ac3565b82525050565b6000602082019050613c676000830184613c43565b92915050565b60008060408385031215613c8457613c836139de565b5b6000613c9285828601613aec565b9250506020613ca385828601613c01565b9150509250929050565b613cb681613be0565b82525050565b6000602082019050613cd16000830184613cad565b92915050565b6000613ce282613aa3565b9050919050565b613cf281613cd7565b8114613cfd57600080fd5b50565b600081359050613d0f81613ce9565b92915050565b600060208284031215613d2b57613d2a6139de565b5b6000613d3984828501613d00565b91505092915050565b600080600060608486031215613d5b57613d5a6139de565b5b6000613d6986828701613aec565b9350506020613d7a86828701613aec565b9250506040613d8b86828701613c01565b9150509250925092565b613d9e81613a6d565b8114613da957600080fd5b50565b600081359050613dbb81613d95565b92915050565b60008060408385031215613dd857613dd76139de565b5b6000613de685828601613aec565b9250506020613df785828601613dac565b9150509250929050565b600060208284031215613e1757613e166139de565b5b6000613e2584828501613dac565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613e7082613b74565b810181811067ffffffffffffffff82111715613e8f57613e8e613e38565b5b80604052505050565b6000613ea26139d4565b9050613eae8282613e67565b919050565b600067ffffffffffffffff821115613ece57613ecd613e38565b5b613ed782613b74565b9050602081019050919050565b82818337600083830152505050565b6000613f06613f0184613eb3565b613e98565b905082815260208101848484011115613f2257613f21613e33565b5b613f2d848285613ee4565b509392505050565b600082601f830112613f4a57613f49613e2e565b5b8135613f5a848260208601613ef3565b91505092915050565b60008060408385031215613f7a57613f796139de565b5b6000613f8885828601613aec565b925050602083013567ffffffffffffffff811115613fa957613fa86139e3565b5b613fb585828601613f35565b9150509250929050565b600080fd5b600080fd5b60008083601f840112613fdf57613fde613e2e565b5b8235905067ffffffffffffffff811115613ffc57613ffb613fbf565b5b60208301915083600182028301111561401857614017613fc4565b5b9250929050565b60008060208385031215614036576140356139de565b5b600083013567ffffffffffffffff811115614054576140536139e3565b5b61406085828601613fc9565b92509250509250929050565b61407581613cd7565b82525050565b6000602082019050614090600083018461406c565b92915050565b600067ffffffffffffffff8211156140b1576140b0613e38565b5b6140ba82613b74565b9050602081019050919050565b60006140da6140d584614096565b613e98565b9050828152602081018484840111156140f6576140f5613e33565b5b614101848285613ee4565b509392505050565b600082601f83011261411e5761411d613e2e565b5b813561412e8482602086016140c7565b91505092915050565b60008060008060808587031215614151576141506139de565b5b600061415f87828801613aec565b945050602061417087828801613aec565b935050604061418187828801613c01565b925050606085013567ffffffffffffffff8111156141a2576141a16139e3565b5b6141ae87828801614109565b91505092959194509250565b600080604083850312156141d1576141d06139de565b5b60006141df85828601613aec565b92505060206141f085828601613aec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061424157607f821691505b602082108103614254576142536141fa565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006142b6602183613b39565b91506142c18261425a565b604082019050919050565b600060208201905081810360008301526142e5816142a9565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000614348603d83613b39565b9150614353826142ec565b604082019050919050565b600060208201905081810360008301526143778161433b565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006143da602d83613b39565b91506143e58261437e565b604082019050919050565b60006020820190508181036000830152614409816143cd565b9050919050565b7f62616c616e63652076616c7565206e6565647320746f206265203e3d20616d6f60008201527f756e740000000000000000000000000000000000000000000000000000000000602082015250565b600061446c602383613b39565b915061447782614410565b604082019050919050565b6000602082019050818103600083015261449b8161445f565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006144fe602b83613b39565b9150614509826144a2565b604082019050919050565b6000602082019050818103600083015261452d816144f1565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614590602c83613b39565b915061459b82614534565b604082019050919050565b600060208201905081810360008301526145bf81614583565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416c6c6c6f776c6973744f776e65723a2063616c6c6572206973206e6f74206960008201527f6e2074686520416c6c6f774c6973740000000000000000000000000000000000602082015250565b6000614651602f83613b39565b915061465c826145f5565b604082019050919050565b6000602082019050818103600083015261468081614644565b9050919050565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f20746865206d617842617463684d696e746564000000000000000000602082015250565b60006146e3603783613b39565b91506146ee82614687565b604082019050919050565b60006020820190508181036000830152614712816146d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061475382613be0565b915061475e83613be0565b925082820261476c81613be0565b9150828204841483151761478357614782614719565b5b5092915050565b7f50617961626c65206d757374206265206174206c656173742074686520616d6f60008201527f756e74202a206d696e7420666565000000000000000000000000000000000000602082015250565b60006147e6602e83613b39565b91506147f18261478a565b604082019050919050565b60006020820190508181036000830152614815816147d9565b9050919050565b600061482782613be0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361485957614858614719565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061489a601883613b39565b91506148a582614864565b602082019050919050565b600060208201905081810360008301526148c98161488d565b9050919050565b7f4e65656420612076616c6964206e6577206d617820737570706c790000000000600082015250565b6000614906601b83613b39565b9150614911826148d0565b602082019050919050565b60006020820190508181036000830152614935816148f9565b9050919050565b7f63616c6c6572206973206e6f7420617574686f72697a656420746f206275726e600082015250565b6000614972602083613b39565b915061497d8261493c565b602082019050919050565b600060208201905081810360008301526149a181614965565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614a04602983613b39565b9150614a0f826149a8565b604082019050919050565b60006020820190508181036000830152614a33816149f7565b9050919050565b7f63616c6c6572206973206e6f7420617574686f72697a656420746f207472616e60008201527f7366657200000000000000000000000000000000000000000000000000000000602082015250565b6000614a96602483613b39565b9150614aa182614a3a565b604082019050919050565b60006020820190508181036000830152614ac581614a89565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614b397fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614afc565b614b438683614afc565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614b80614b7b614b7684613be0565b614b5b565b613be0565b9050919050565b6000819050919050565b614b9a83614b65565b614bae614ba682614b87565b848454614b09565b825550505050565b600090565b614bc3614bb6565b614bce818484614b91565b505050565b5b81811015614bf257614be7600082614bbb565b600181019050614bd4565b5050565b601f821115614c3757614c0881614ad7565b614c1184614aec565b81016020851015614c20578190505b614c34614c2c85614aec565b830182614bd3565b50505b505050565b600082821c905092915050565b6000614c5a60001984600802614c3c565b1980831691505092915050565b6000614c738383614c49565b9150826002028217905092915050565b614c8d8383614acc565b67ffffffffffffffff811115614ca657614ca5613e38565b5b614cb08254614229565b614cbb828285614bf6565b6000601f831160018114614cea5760008415614cd8578287013590505b614ce28582614c67565b865550614d4a565b601f198416614cf886614ad7565b60005b82811015614d2057848901358255600182019150602085019450602081019050614cfb565b86831015614d3d5784890135614d39601f891682614c49565b8355505b6001600288020188555050505b50505050505050565b7f4e65656420612076616c6964206e6577206d6178206d696e74206c696d697400600082015250565b6000614d89601f83613b39565b9150614d9482614d53565b602082019050919050565b60006020820190508181036000830152614db881614d7c565b9050919050565b7f6d696e7420666565206e6f74206d657400000000000000000000000000000000600082015250565b6000614df5601083613b39565b9150614e0082614dbf565b602082019050919050565b60006020820190508181036000830152614e2481614de8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614e87602683613b39565b9150614e9282614e2b565b604082019050919050565b60006020820190508181036000830152614eb681614e7a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614ef3602083613b39565b9150614efe82614ebd565b602082019050919050565b60006020820190508181036000830152614f2281614ee6565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614f85602583613b39565b9150614f9082614f29565b604082019050919050565b60006020820190508181036000830152614fb481614f78565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000615017602483613b39565b915061502282614fbb565b604082019050919050565b600060208201905081810360008301526150468161500a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000615083601d83613b39565b915061508e8261504d565b602082019050919050565b600060208201905081810360008301526150b281615076565b9050919050565b600081905092915050565b50565b60006150d46000836150b9565b91506150df826150c4565b600082019050919050565b60006150f5826150c7565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b600061515b603a83613b39565b9150615166826150ff565b604082019050919050565b6000602082019050818103600083015261518a8161514e565b9050919050565b7f416c6c6c6f776c6973744f776e65723a204e65656420612076616c696420616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006151ed602583613b39565b91506151f882615191565b604082019050919050565b6000602082019050818103600083015261521c816151e0565b9050919050565b60006040820190506152386000830185613c43565b6152456020830184613a79565b9392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006152a8602e83613b39565b91506152b38261524c565b604082019050919050565b600060208201905081810360008301526152d78161529b565b9050919050565b6152e782613b2e565b67ffffffffffffffff811115615300576152ff613e38565b5b61530a8254614229565b615315828285614bf6565b600060209050601f8311600181146153485760008415615336578287015190505b6153408582614c67565b8655506153a8565b601f19841661535686614ad7565b60005b8281101561537e57848901518255600182019150602085019450602081019050615359565b8683101561539b5784890151615397601f891682614c49565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061540c603283613b39565b9150615417826153b0565b604082019050919050565b6000602082019050818103600083015261543b816153ff565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000615478601983613b39565b915061548382615442565b602082019050919050565b600060208201905081810360008301526154a78161546b565b9050919050565b600081905092915050565b60006154c482613b2e565b6154ce81856154ae565b93506154de818560208601613b4a565b80840191505092915050565b60006154f682856154b9565b915061550282846154b9565b91508190509392505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000615544601483613b39565b915061554f8261550e565b602082019050919050565b6000602082019050818103600083015261557381615537565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006155b0601083613b39565b91506155bb8261557a565b602082019050919050565b600060208201905081810360008301526155df816155a3565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061560d826155e6565b61561781856155f1565b9350615627818560208601613b4a565b61563081613b74565b840191505092915050565b60006080820190506156506000830187613c43565b61565d6020830186613c43565b61566a6040830185613cad565b818103606083015261567c8184615602565b905095945050505050565b60008151905061569681613a14565b92915050565b6000602082840312156156b2576156b16139de565b5b60006156c084828501615687565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000615725603583613b39565b9150615730826156c9565b604082019050919050565b6000602082019050818103600083015261575481615718565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615791602083613b39565b915061579c8261575b565b602082019050919050565b600060208201905081810360008301526157c081615784565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006157fd601c83613b39565b9150615808826157c7565b602082019050919050565b6000602082019050818103600083015261582c816157f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061586d82613be0565b915061587883613be0565b92508282039050818111156158905761588f614719565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220ffff4965c376abc0503dccba4baee41af802ed302acfd1654e7378fb5d385b2f64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 964,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 966,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 970,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 974,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 978,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 984,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2044,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2048,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2051,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2055,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2399,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 158,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_paused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_owner",
        "offset": 1,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 4908,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "allowlist",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4911,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "allowListEnabled",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 6065,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Counter)2982_storage"
      },
      {
        "astId": 6068,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "mintFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6071,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "maxSupply",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6074,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "maxBatchMint",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6077,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "singleNftMeta",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 6079,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "redeemAuthorizer",
        "offset": 1,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 6081,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "destination",
        "offset": 0,
        "slot": "19",
        "type": "t_address_payable"
      },
      {
        "astId": 6083,
        "contract": "contracts/VaultNft.sol:VaultNft",
        "label": "baseURI",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2982_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2981,
            "contract": "contracts/VaultNft.sol:VaultNft",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}